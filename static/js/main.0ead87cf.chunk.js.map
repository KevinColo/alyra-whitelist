{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","status","contract","proposals","step","whitelist","componentWillMount","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","getProposals","call","getStatus","getWhitelist","events","VoterRegistered","on","Voted","updateProposal","ProposalRegistered","WorkflowStatusChange","getStep","getWinningProposal","winningProposal","length","value","send","from","proposalsRegister","submitProposal","proposal","proposalRegister","voteRegister","proposalIndex","voterRegister","updateStatus","addCard","result","proposalList","this","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","prop","index","description","voteCount","Button","disabled","onClick","Form","Group","controlId","Control","type","id","ref","input","className","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ead87cf.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, status: null,\n    contract: null, proposals: null, step: null, whitelist: null };\n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract Voting avec web3 et les informations du déploiement du fichier (client/src/contracts/Voting.json)\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n  \n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    const { contract } = this.state;\n  \n    // récupérer la liste des propositions\n    const proposals = await contract.methods.getProposals().call();\n    const status = await contract.methods.getStatus().call();\n    let whitelist = await contract.methods.getWhitelist().call();\n    let step, winningProposal;\n    contract.events.VoterRegistered().on('data', \n      async () =>  {\n        whitelist = await contract.methods.getWhitelist().call();\n        this.setState({whitelist});\n      })\n      .on('error', console.error);\n    contract.events.Voted().on('data', \n      async () =>  await this.updateProposal)\n      .on('error', console.error);\n    contract.events.ProposalRegistered().on('data', \n      async () => await this.updateProposal)\n      .on('error', console.error);\n      contract.events.WorkflowStatusChange().on('data', \n      async () =>  {\n        this.runInit();\n        step = this.getStep;\n        winningProposal = await this.getWinningProposal(status, proposals);\n      })\n      .on('error', console.error);\n\n    window.ethereum.on('accountsChanged', (accounts) => {\n      this.setState({accounts});\n    });\n    \n    step = this.getStep(status);\n    winningProposal = await this.getWinningProposal(status, proposals);\n    \n    // Mettre à jour le state \n    this.setState({ proposals, step, whitelist, status, winningProposal });\n  }; \n\n  getWinningProposal = async(status, proposals) => {\n    const { contract } = this.state;\n    if (status === '5' && proposals.length > 0) {\n      return await contract.methods.getWinningProposal().call();\n    }\n  }\n\n  getStep = (status) => {\n    switch(status) {\n      case '0':\n        return 'Enregistrement des utilisateurs';\n      case '1':\n        return 'Début de l\\'enregistrement des propositions';\n      case '2':\n        return 'Fin  de l\\'enregistrement des propositions';\n      case '3':\n        return 'Début de la session de vote';\n      case '4':\n        return 'Fin de la session de vote';\n      case '5':\n        return 'Résultat des votes';\n      default:\n        return 'Status invalide';\n    }\n  }\n\n  // Mettre à jour l'affichage en fonction de l'évent\n  updateProposal = async() => {\n    const { contract } = this.state;\n    const proposals = await contract.methods.getProposals().call();\n    this.setState({proposals});\n}\n\n  // Enregistrement des électeurs\n  whitelist = async() => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n    \n    // Interaction avec le smart contract pour ajouter un compte \n    await contract.methods.whitelist(address).send({from: accounts[0]});\n    // Récupérer la liste des comptes autorisés\n    this.runInit();\n  }\n\n  // Enregistrement de la proposition saisie par l'utilisateur \n  proposalsRegister = async() => {\n    const { accounts, contract } = this.state;\n    const submitProposal = this.proposal.value;\n  \n    // récupérer la liste des propositions\n    await contract.methods.proposalRegister(submitProposal)\n      .send({from: accounts[0]});\n    this.runInit();\n  }\n\n  // Enregistrement des votes des utilisateurs\n  voteRegister = async(proposalIndex) => {\n    const { accounts, contract } = this.state;\n\n    // récupérer la liste des propositions\n    await contract.methods.voterRegister(proposalIndex).send({from: accounts[0]});\n    // Mettre à jour le state \n    this.runInit();\n  }\n\n  // Mise à jour du statut de la session\n  updateStatus = async() => {\n    const { accounts, contract} = this.state;\n    await contract.methods.updateStatus().send({from: accounts[0]});\n    this.runInit();\n  }\n \n\n  render() {\n    const { proposals, status, step, whitelist, winningProposal } = this.state;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    let addCard, result, proposalList;\n    if (status !== '0') {\n      proposalList = \n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width: '50rem' }}>\n        <Card.Header><strong>Liste des propositions</strong></Card.Header>\n        <Card.Body>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>Description</th>\n                    <th>Nombre de vote</th>\n                    <th>Voter !</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {proposals !== null && \n                    proposals.map((prop, index) => <tr><td>{prop.description}</td>\n                    <td>{prop.voteCount}</td>\n                    <td><Button disabled={status !== '3'} onClick={() => this.voteRegister(index)} variant=\"dark\" > Ajouter </Button></td></tr>)\n                  }\n                </tbody>\n              </Table>\n            </ListGroup.Item>\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    </div>\n    }\n    if (status === '1') {\n      addCard =\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width: '50rem' }}>\n        <Card.Header><strong>Ajouter des propositions</strong></Card.Header>\n        <Card.Body>\n          <Form.Group controlId=\"formProposal\">\n            <Form.Control type=\"text\" id=\"proposal\"\n            ref={(input) => { this.proposal = input }}\n            />\n          </Form.Group>\n          <Button onClick={ this.proposalsRegister } variant=\"dark\" > Ajouter </Button>\n        </Card.Body>\n      </Card>\n      </div>;\n    } else if (status === '0') {\n      addCard =\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width: '50rem' }}>\n        <Card.Header><strong>Ajouter des utilisateurs</strong></Card.Header>\n        <Card.Body>\n          <Form.Group controlId=\"formAddress\">\n            <Form.Control type=\"text\" id=\"address\"\n            ref={(input) => { this.address = input }}\n            />\n          </Form.Group>\n          <Button onClick={ this.whitelist } variant=\"dark\" > Autoriser </Button>\n        </Card.Body>\n      </Card>\n      </div>;\n    } else if (status === '5'){\n      result =\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n      <Card style={{ width: '50rem' }}>\n        <Card.Header><strong>La proposition gagnate est : </strong></Card.Header>\n        <Card.Body>\n        <h3 className=\"text-center\">{winningProposal}</h3>\n        </Card.Body>\n      </Card>\n      </div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n            <h3 className=\"text-center\">{step}</h3>\n        </div>\n        {result}\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Liste des utilisateurs</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {whitelist !== null && \n                        whitelist.map((address) => <tr><td>{address}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        {proposalList}\n        <br></br>\n        {addCard}\n          <br></br>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Button onClick={ this.updateStatus } variant=\"dark\" > Etape suivante </Button>\n          </div>\n        <br></br>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}